{"version":3,"sources":["decoders.ts","App.tsx","encoders.ts","serviceWorker.ts","index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","numberDecoder","hexDecoder","stringDecoder","timestampDecoder","bn_js__WEBPACK_IMPORTED_MODULE_0__","bn_js__WEBPACK_IMPORTED_MODULE_0___default","n","buffer","length","BN","toString","e","bytes","noControlChars","arguments","undefined","getTrailingByte","index","Error","result","i","byte1","cp","String","fromCodePoint","_","timestamp","reduce","accum","byte","Date","toISOString","App","_this","Object","_Users_sclee_workspace_www_rlp_codechain_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_sclee_workspace_www_rlp_codechain_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_sclee_workspace_www_rlp_codechain_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleEncodedTextChange","plainText","decodeButton","value","target","text","replace","disabled","label","startsWith","RLP","setState","mode","encodedText","handlePlainTextChange","edit","rebuild","encodeButton","plain","state","__","_props","change","handleClickDecode","handleClickEncode","body","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","id","placeholder","onChange","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","variant","size","block","onClick","Item","key","idx","handler","fromList","React","Component","props","_this2","type","decoded","valueHandler","itemValue","disabledSet","add","splice","Buffer","from","Array","isArray","delete","handleTextChange","hex","string","number","console","log","hexEncoder","stringEncoder","numberEncoder","timestampEncoder","handleSelectTypeChange","valid","handleAdd","handleRemove","handleChange","handleListAdd","handleListAddInsert","handleListRemove","isBuffer","hexString","isNull","Set","options","map","_this3","style","height","marginLeft","child","decodedValue","renderSelector","isNaN","slice","parse","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f4b95a9.chunk.js","sourcesContent":["import BN from \"bn.js\";\n\nexport function numberDecoder(buffer: Buffer): string | null {\n  if (buffer.length > 8) {\n    return null;\n  }\n  try {\n    const bn = new BN(buffer);\n    return bn.toString(10);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function hexDecoder(buffer: Buffer): string | null {\n  return buffer.toString(\"hex\");\n}\n\nexport function stringDecoder(bytes: Buffer, noControlChars = true): string | null {\n  function getTrailingByte(index: number) {\n    if ((bytes[index] & 0xc0) !== 0x80) throw new Error(\"Invalid utf8 sequence\");\n    return bytes[index] & 0x3f;\n  }\n\n  try {\n    let result = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n      const byte1 = bytes[i];\n      let cp;\n      if (byte1 < 0x80) {\n        cp = byte1;\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        const byte2 = getTrailingByte(++i);\n        cp = ((byte1 & 0x1f) << 6) | byte2;\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = getTrailingByte(++i);\n        const byte3 = getTrailingByte(++i);\n        cp = ((byte1 & 0x0f) << 12) | (byte2 << 6) | byte3;\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = getTrailingByte(++i);\n        const byte3 = getTrailingByte(++i);\n        const byte4 = getTrailingByte(++i);\n        cp = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n      } else {\n        throw new Error(\"Invalid utf8 sequence\");\n      }\n\n      if (noControlChars === true) {\n        // https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n        const c0 = cp >= 0x0000 && cp <= 0x001f;\n        const whitespace = cp === 0x09 || cp === 0x0a || cp === 0x0d;\n        const c1 = cp >= 0x0080 && cp <= 0x009f;\n        if ((c0 && !whitespace) || c1) {\n          return null; // control characters\n        }\n      }\n      result += String.fromCodePoint(cp);\n    }\n\n    return result;\n  } catch (_) {\n    return null;\n  }\n}\n\nexport function timestampDecoder(buffer: Buffer): string | null {\n  if (buffer.length > 4) {\n    return null;\n  }\n\n  try {\n    const timestamp = buffer.reduce((accum, byte) => (accum << 8) + byte);\n    return new Date(timestamp * 1000).toISOString();\n  } catch (_) {\n    return null;\n  }\n}\n","import React from \"react\";\nimport * as RLP from \"rlp\";\nimport { hexDecoder, numberDecoder, stringDecoder, timestampDecoder } from \"./decoders\";\nimport { hexEncoder, numberEncoder, stringEncoder, timestampEncoder } from \"./encoders\";\nimport { isNull } from \"util\";\nimport { Button } from \"react-bootstrap\";\n\ntype AppState = {\n  mode: \"encoded\" | \"decoded\";\n  encodedText: string;\n  // Single source of truth for rlp decoded text.\n  // If there are any changes in child components, they are lifted up to this source of truth\n  plainText: any;\n  decodeButton: {\n    disabled: boolean;\n    label: string;\n  };\n  encodeButton: {\n    disabled: boolean;\n    label: string;\n  };\n  // For re-rendering item list\n  change: boolean;\n};\n\nclass App extends React.Component<{}, AppState> {\n  public constructor() {\n    super({});\n\n    this.state = {\n      mode: \"encoded\",\n      encodedText: \"\",\n      plainText: null,\n      decodeButton: {\n        disabled: true,\n        label: \"RLP is empty\",\n      },\n      encodeButton: {\n        disabled: false,\n        label: \"Encode\",\n      },\n      change: false,\n    };\n  }\n\n  private handleEncodedTextChange = (e: any) => {\n    const { value }: { value: string } = e.target;\n    let text = value.replace(/\\s/g, \"\");\n    let plainText;\n    let decodeButton;\n\n    try {\n      if (text.length === 0) {\n        plainText = null;\n        decodeButton = {\n          disabled: true,\n          label: \"RLP is empty\",\n        };\n      } else {\n        if (text.startsWith(\"0x\") === false) {\n          text = \"0x\" + text;\n        }\n        plainText = RLP.decode(text);\n        decodeButton = {\n          disabled: false,\n          label: \"Decode\",\n        };\n      }\n    } catch (_) {\n      plainText = null;\n      decodeButton = {\n        disabled: true,\n        label: \"RLP decode error\",\n      };\n    }\n\n    this.setState({\n      mode: \"encoded\",\n      encodedText: value,\n      plainText,\n      decodeButton,\n    });\n  };\n\n  private handlePlainTextChange = (\n    _: number,\n    value: any,\n    disabled: boolean,\n    edit: Edit,\n    rebuild: boolean,\n  ) => {\n    let encodeButton: any;\n    let encodedText: any;\n    let plain = value;\n\n    // Change the source of truth only when a change is valid\n    if (!disabled) {\n      if (edit === \"change\") {\n        plain = [this.state.plainText];\n      }\n\n      try {\n        encodedText = RLP.encode(plain).toString(\"hex\");\n\n        this.setState({\n          encodedText,\n          plainText: plain,\n        });\n      } catch (__) {\n        encodeButton = {\n          disabled: true,\n          label: \"RLP encode error\",\n        };\n      }\n\n      encodeButton = {\n        disabled: false,\n        label: \"Encode\",\n      };\n    } else {\n      encodeButton = {\n        disabled: true,\n        label: \"RLP encode error\",\n      };\n    }\n\n    this.setState({\n      encodeButton,\n    });\n\n    // Re-render the source of truth if one of add, remove, list change occurs\n    if (rebuild) {\n      this.setState((state, _props) => ({\n        change: !state.change,\n      }));\n    }\n  };\n\n  private handleClickDecode = () => {\n    this.setState({ mode: \"decoded\" });\n  };\n\n  private handleClickEncode = () => {\n    this.setState({ mode: \"encoded\" });\n  };\n\n  public render() {\n    let body;\n    if (this.state.mode === \"encoded\") {\n      body = (\n        <div className=\"App-body\">\n          <div>\n            <textarea\n              id=\"encoded-text\"\n              className=\"code form-control\"\n              placeholder=\"RLP encoded hex string here\"\n              value={this.state.encodedText}\n              onChange={this.handleEncodedTextChange}\n            />\n          </div>\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            disabled={this.state.decodeButton.disabled}\n            onClick={this.handleClickDecode}\n          >\n            {this.state.decodeButton.label}\n          </Button>\n        </div>\n      );\n    } else if (this.state.mode === \"decoded\") {\n      body = (\n        <div className=\"App-body\">\n          <div>\n            <Item\n              key={this.state.change ? \"true\" : \"false\"}\n              idx={0}\n              value={this.state.plainText}\n              handler={this.handlePlainTextChange}\n              fromList={false}\n            />\n          </div>\n          <Button\n            variant=\"primary\"\n            size=\"lg\"\n            block\n            disabled={this.state.encodeButton.disabled}\n            onClick={this.handleClickEncode}\n          >\n            {this.state.encodeButton.label}\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>RLP Debugger</h1>\n        </header>\n        {body}\n      </div>\n    );\n  }\n}\n\n// String(number | hex | string | timestamp), List\ntype Type = \"number\" | \"hex\" | \"string\" | \"timestamp\" | \"list\";\n\n// add - add element in front of corresponding element\n// remove - remove the corresponding lement\n// change - change a string to the list\ntype Edit = \"add\" | \"remove\" | \"change\" | \"null\";\n\ninterface ItemProps {\n  value: Buffer | any[];\n  // parent handler for lifting state up\n  handler: (index: number, value: any, disabled: boolean, edit: Edit, rebuild: boolean) => any;\n  idx: number;\n  fromList: boolean;\n}\n\ninterface ItemState {\n  type: Type;\n  decoded: {\n    hex: string | null;\n    string: string | null;\n    number: string | null;\n    timestamp: string | null;\n    [key: string]: string | null;\n  };\n  // temporary value which sync with the parent's state\n  value: Buffer | any[] | null;\n  // A set of indices which the corresponding is not valid\n  disabled: Set<number>;\n}\n\nclass Item extends React.Component<ItemProps, ItemState> {\n  public constructor(props: ItemProps) {\n    super(props);\n    let type: Type;\n    let decoded;\n\n    if (Array.isArray(props.value)) {\n      type = \"list\";\n      decoded = {\n        hex: null,\n        string: null,\n        number: null,\n        timestamp: null,\n      };\n    } else if (Buffer.isBuffer(props.value)) {\n      type = \"hex\";\n      const hexString = hexDecoder(props.value);\n      decoded = {\n        hex:\n          hexString === null\n            ? null\n            : hexString.replace(/(\\w{4})/g, \"$1 \").replace(/(^\\s+|\\s+$)/, \"\"),\n        string: stringDecoder(props.value),\n        number: numberDecoder(props.value),\n        timestamp: timestampDecoder(props.value),\n      };\n    } else if (isNull(props.value)) {\n      type = \"hex\";\n      decoded = {\n        hex: \"0x80\",\n        string: null,\n        number: null,\n        timestamp: null,\n      };\n    } else {\n      throw Error(\"Invalid type\");\n    }\n\n    this.state = {\n      type,\n      decoded,\n      value: props.value,\n      disabled: new Set(),\n    };\n  }\n\n  // Handler for lifting state up\n  private valueHandler = (\n    index: number,\n    value: any,\n    disabled: boolean,\n    edit: Edit,\n    rebuild: boolean,\n  ) => {\n    // Only a list gets editing events from child elements\n    if (this.state.type !== \"list\") {\n      throw Error(\"Invalid type\");\n    }\n\n    let itemValue = this.state.value as any[];\n    let disabledSet = this.state.disabled;\n\n    // Do nothing if editing event is invalid\n    if (disabled) {\n      this.props.handler(this.props.idx, itemValue, true, \"null\", rebuild);\n      // Include the corresponding element into the invlid element list\n      disabledSet.add(index);\n    } else {\n      if (edit === \"null\") {\n        itemValue[index] = value;\n      } else if (edit === \"add\") {\n        itemValue.splice(index + 1, 0, Buffer.from(\"0x00\", \"hex\"));\n      } else if (edit === \"remove\") {\n        itemValue.splice(index, 1);\n      } else if (edit === \"change\") {\n        if (Array.isArray(itemValue[index])) {\n          throw Error(\"Invalid type\");\n        }\n\n        itemValue[index] = [itemValue[index]];\n      }\n      // Extract valid element's index which is not invalid anymore\n      disabledSet.delete(index);\n      if (disabledSet.size === 0) {\n        this.props.handler(this.props.idx, itemValue, false, \"null\", rebuild);\n      } else {\n        this.props.handler(this.props.idx, itemValue, true, \"null\", rebuild);\n      }\n    }\n\n    this.setState({ value: itemValue, disabled: disabledSet });\n  };\n\n  private handleTextChange = (e: any) => {\n    const { value }: { value: string } = e.target;\n    let hex = this.state.decoded.hex;\n    let string = this.state.decoded.string;\n    let number = this.state.decoded.number;\n    let timestamp = this.state.decoded.timestamp;\n    let itemValue = this.state.value;\n\n    // sync between 4 options\n    // If the changed value is invalid, only update the correspoding option's value and set null for others\n    if (this.state.type === \"hex\") {\n      console.log(value);\n      hex = value;\n      itemValue = hexEncoder(value.startsWith(\"0x\") ? value : \"0x\" + value);\n\n      string = itemValue === null ? null : stringDecoder(itemValue);\n      number = itemValue === null ? null : numberDecoder(itemValue);\n      timestamp = itemValue === null ? null : timestampDecoder(itemValue);\n    } else if (this.state.type === \"string\") {\n      string = value;\n      itemValue = stringEncoder(value);\n\n      hex = itemValue === null ? null : hexDecoder(itemValue);\n      number = itemValue === null ? null : numberDecoder(itemValue);\n      timestamp = itemValue === null ? null : timestampDecoder(itemValue);\n    } else if (this.state.type === \"number\") {\n      number = value;\n      itemValue = numberEncoder(value);\n\n      hex = itemValue === null ? null : hexDecoder(itemValue);\n      string = itemValue === null ? null : stringDecoder(itemValue);\n      timestamp = itemValue === null ? null : timestampDecoder(itemValue);\n    } else if (this.state.type === \"timestamp\") {\n      timestamp = value;\n      itemValue = timestampEncoder(value);\n\n      hex = itemValue === null ? null : hexDecoder(itemValue);\n      string = itemValue === null ? null : stringDecoder(itemValue);\n      number = itemValue === null ? null : numberDecoder(itemValue);\n    } else {\n      throw Error(\"Invalid type\");\n    }\n\n    this.setState({\n      type: this.state.type,\n      decoded: {\n        hex,\n        string,\n        number,\n        timestamp,\n      },\n      value: itemValue,\n    });\n\n    // lift state up only when a valid change occurs\n    if (itemValue === null) {\n      this.props.handler(this.props.idx, itemValue, true, \"null\", false);\n    } else {\n      this.props.handler(this.props.idx, itemValue, false, \"null\", false);\n    }\n  };\n\n  private handleSelectTypeChange = (e: any) => {\n    let itemValue;\n    if (e.target.value === \"hex\") {\n      itemValue = this.state.decoded.hex === null ? null : hexEncoder(this.state.decoded.hex);\n    } else if (e.target.value === \"string\") {\n      itemValue =\n        this.state.decoded.string === null ? null : stringEncoder(this.state.decoded.string);\n    } else if (e.target.valid === \"number\") {\n      itemValue =\n        this.state.decoded.number === null ? null : numberEncoder(this.state.decoded.number);\n    } else {\n      itemValue =\n        this.state.decoded.timestamp === null\n          ? null\n          : timestampEncoder(this.state.decoded.timestamp);\n    }\n\n    this.setState({\n      type: e.target.value,\n      value: itemValue,\n    });\n\n    this.props.handler(this.props.idx, itemValue, false, \"null\", false);\n  };\n\n  private renderSelector() {\n    const types: Type[] = [\"hex\", \"string\", \"number\", \"timestamp\"];\n    const options = types.map((type, index) => (\n      <option key={index} value={type}>\n        {type}\n      </option>\n    ));\n    return (\n      <select\n        className=\"browser-default custom-select\"\n        value={this.state.type}\n        onChange={this.handleSelectTypeChange}\n      >\n        {options}\n      </select>\n    );\n  }\n\n  private handleAdd = () => {\n    this.props.handler(this.props.idx, null, false, \"add\", true);\n  };\n\n  private handleRemove = () => {\n    this.props.handler(this.props.idx, null, false, \"remove\", true);\n  };\n\n  private handleChange = () => {\n    this.props.handler(this.props.idx, null, false, \"change\", true);\n  };\n\n  private handleListAdd = () => {\n    this.props.handler(this.props.idx, null, false, \"add\", true);\n  };\n\n  private handleListAddInsert = () => {\n    let itemValue = this.state.value as any[];\n    itemValue.splice(0, 0, Buffer.from(\"0x00\", \"hex\"));\n    this.props.handler(this.props.idx, itemValue, false, \"null\", true);\n    this.setState({ value: itemValue });\n  };\n\n  private handleListRemove = () => {\n    this.props.handler(this.props.idx, null, false, \"remove\", true);\n  };\n\n  public render() {\n    if (this.state.type === \"list\") {\n      if (Array.isArray(this.state.value)) {\n        return (\n          <div>\n            <div style={{ height: \"45px\" }}>\n              <div className=\"list\">[+] List({this.state.value.length})</div>\n              <div className=\"buttons\">\n                {this.props.fromList ? (\n                  <Button variant=\"outline-primary\" onClick={this.handleListAdd}>\n                    +\n                  </Button>\n                ) : null}\n                <Button\n                  variant=\"outline-danger\"\n                  onClick={this.handleListRemove}\n                  style={{ marginLeft: \"0.5rem\" }}\n                >\n                  -\n                </Button>\n              </div>\n            </div>\n            <div style={{ marginLeft: \"1rem\" }}>\n              <Button variant=\"outline-info\" onClick={this.handleListAddInsert}>\n                +\n              </Button>\n              {this.state.value.map((child, idx) => (\n                <Item\n                  key={idx}\n                  idx={idx}\n                  value={child}\n                  handler={this.valueHandler}\n                  fromList={true}\n                />\n              ))}\n            </div>\n          </div>\n        );\n      } else {\n        throw Error(\"Invalid type\");\n      }\n    } else {\n      let decodedValue = this.state.decoded[this.state.type];\n      if (decodedValue === null) {\n        decodedValue = \"\";\n      }\n\n      return (\n        <div>\n          <div className=\"element\">\n            <div className=\"selector\">{this.renderSelector()} </div>\n            <div className=\"decoded-text\">\n              <input\n                className=\"form-control\"\n                value={decodedValue}\n                onChange={this.handleTextChange}\n              />\n            </div>\n            {this.props.fromList ? (\n              <div className=\"buttons\">\n                <Button variant=\"outline-primary\" onClick={this.handleAdd}>\n                  +\n                </Button>\n                <Button\n                  variant=\"outline-danger\"\n                  onClick={this.handleRemove}\n                  style={{ marginLeft: \"0.5rem\" }}\n                >\n                  -\n                </Button>\n              </div>\n            ) : null}\n\n            <div className=\"buttons\">\n              <Button\n                variant=\"outline-success\"\n                onClick={this.handleChange}\n                style={{ marginLeft: \"0.5rem\" }}\n              >\n                List\n              </Button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import BN from \"bn.js\";\r\n\r\nexport function numberEncoder(string: string): Buffer | null {\r\n  if (isNaN(+string)) {\r\n    return null;\r\n  }\r\n  try {\r\n    const bn = new BN(+string);\r\n    const hexString = bn.toString(\"hex\");\r\n    return Buffer.from(hexString.length % 2 === 1 ? \"0\" + hexString : hexString, \"hex\");\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function hexEncoder(string: string): Buffer | null {\r\n  try {\r\n    return Buffer.from(\r\n      string.slice(2).length % 2 === 1 ? \"0\" + string.slice(2) : string.slice(2),\r\n      \"hex\",\r\n    );\r\n  } catch (_) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function stringEncoder(string: string): Buffer | null {\r\n  try {\r\n    return Buffer.from(string, \"utf-8\");\r\n  } catch (_) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function timestampEncoder(string: string): Buffer | null {\r\n  try {\r\n    let timestamp = Date.parse(string) / 1000;\r\n    return Buffer.from(timestamp.toString(16));\r\n  } catch (_) {\r\n    return null;\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}